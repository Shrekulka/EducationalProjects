// Копирование динамического массива и инициализация случайными числами с использованием random_device и mt19937

// Данный код демонстрирует копирование динамического массива и инициализацию обоих массивов случайными числами,
// используя генератор случайных чисел std::random_device и std::mt19937.
// Код начинается с подключения необходимых заголовочных файлов, таких как <iostream> для ввода/вывода данных и <random>
// для работы с генерацией случайных чисел.
// Затем в функции main() инициализируется генератор случайных чисел std::mt19937 с использованием std::random_device,
// который генерирует случайное зерно для генератора. Создается также распределение std::uniform_int_distribution<int>,
// которое генерирует случайные числа в диапазоне от 0 до 49.
// Далее объявляются переменные size для хранения размера массива, i для использования в циклах, и два указателя на
// массивы pmas1 и pmas2.
// Пользователю предлагается ввести размер массива, который сохраняется в переменной size.
// Выделяется динамическая память для обоих массивов целых чисел размером size с использованием оператора new. Оба
// массива инициализируются нулевыми значениями.
// Затем оба массива заполняются случайными числами с помощью цикла for, генератора случайных чисел и распределения.
// Выводится содержимое первого массива с помощью цикла for и оператора std::cout.
// Затем выводится содержимое второго массива.
// Далее освобождается память, выделенная под второй массив, с помощью оператора delete[].
// Выделяется новая память для второго массива с помощью оператора new, чтобы создать его копию.
// Выполняется копирование содержимого первого массива во второй массив с помощью цикла for.
// После копирования выводятся содержимое обоих массивов для проверки, что копирование прошло успешно.
// Наконец, освобождается выделенная динамическая память для обоих массивов с помощью оператора delete[].

# include <iostream>
# include <random>

int main()
{

// Инициализация генератора случайных чисел с использованием std::random_device
	std::random_device rd;
	std::mt19937 gen(rd());

// Создание распределения случайных чисел от 0 до 49
	std::uniform_int_distribution<int> dist(0, 49);

// Запрос у пользователя ввода размера массива
	int size {};
	size_t i {};
	std::cout << "Enter the size of the array = ";
	std::cin >> size;

// Выделение динамической памяти для двух массивов типа int размером size
	int* pmas1 = new int[size] {};
	int* pmas2 = new int[size] {};

// Заполнение обоих массивов случайными числами
	for (i = 0; i < size; i++)
	{
		pmas1[i] = dist(gen);
		pmas2[i] = dist(gen);
	}

// Вывод первого массива
	std::cout << "\nThe first array:\n";
	for (i = 0; i < size; i++)
	{
		std::cout << pmas1[i] << ' ';
	}

// Вывод второго массива
	std::cout << "\nThe second array:\n";;
	for (i = 0; i < size; i++)
	{
		std::cout << pmas2[i] << ' ';
	}
	std::cout << '\n';

// Освобождение памяти выделенной под второй массив
	delete[] pmas2;

// Выделение памяти под новый второй массив
	pmas2 = new int[size] {};

// Копирование первого массива во второй
	for (i = 0; i < size; i++)
	{
		pmas2[i] = pmas1[i];
	}

// Вывод обоих массивов после копирования
	std::cout << "\nAfter copying the first array into the second:\n\nThe first array:\n";
	for (i = 0; i < size; i++)
	{
		std::cout << pmas1[i] << ' ';
	}
	std::cout << "\nThe second array:\n";
	for (i = 0; i < size; i++)
	{
		std::cout << pmas2[i] << ' ';
	}
	std::cout << '\n';

// Освобождение выделенной динамической памяти
	delete[] pmas1;
	delete[] pmas2;

	return 0;
}
