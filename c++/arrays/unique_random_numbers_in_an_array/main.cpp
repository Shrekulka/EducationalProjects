#include <iostream>
#include <vector>
#include <random>

// Уникальные рандомные числа в массиве
int main()
{
	// Инициализация объекта random_device для получения случайного значения семени
	std::random_device rd;
	// Инициализация генератора случайных чисел mt19937 с полученным значением семени
	std::mt19937 gen(rd());

// Решение №1
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	const int SIZE = 10;
	int mas[SIZE] {};
	size_t i {};
	size_t j {};

	// Заполнение массива уникальными случайными числами
	for (i = 0; i < SIZE; i++)
	{
	xyz:
		// Генерация случайного числа в диапазоне от 0 до SIZE-1
		mas[i] = gen() % SIZE;
		for (j = 0; j < i; j++)
		{
			// Проверка наличия уже сгенерированного числа в массиве
			if (mas[i] == mas[j])
			{
				goto xyz; // Если число уже существует, повторяем генерацию
			}
		}
	}

	// Вывод содержимого массива
	for (auto x: mas)
	{
		std::cout << x << " ";
	}
	std::cout << std::endl;

// Решение №2
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// Использование вектора для генерации случайных чисел
	std::vector<long> vec;
	std::cout << "Size: " << vec.size() << '\n';

	for (i = 0; i < 10; i++)
	{
		// Генерация случайного числа в диапазоне от 10 до 99
		vec.push_back(10 + gen() % 90);
	}

	std::cout << "Size: " << vec.size() << '\n';

	// Вывод содержимого вектора с использованием цикла for и итератора
	for (auto it = vec.begin(); it != vec.end(); ++it)
	{
		std::cout << *it << '\n';
	}

	std::cout << '\n';

	// Использование диапазонного цикла for для вывода содержимого вектора
	for (auto x: vec)
	{
		std::cout << x << '\n';
	}

	return 0;
}
