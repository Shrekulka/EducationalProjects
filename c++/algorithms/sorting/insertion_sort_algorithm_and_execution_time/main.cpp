// Данный код демонстрирует пример реализации алгоритма сортировки методом вставки на языке C++ с помощью динамического
// выделения памяти и работой со временем.

// Данный код представляет собой пример сортировки вставками для массива целых чисел. Он использует случайные числа для
// заполнения массива, выполняет сортировку и выводит отсортированный массив, а также время, затраченное на выполнение
// сортировки.
// Код начинается с подключения необходимых заголовочных файлов, таких как <iostream> для ввода/вывода данных, <random>
// для генерации случайных чисел и <ctime> для работы с временем.
// Затем инициализируется генератор случайных чисел std::mt19937 с использованием std::random_device для получения
// случайного зерна. Создается также распределение std::uniform_int_distribution<int>, которое генерирует случайные
// числа от 0 до 49.
// Далее объявляются переменные my_size для хранения размера массива и i для использования в циклах.
// Пользователю предлагается ввести размер массива, который сохраняется в переменной my_size.
// Выделяется динамическая память для массива целых чисел размером my_size с использованием оператора new.
// Затем происходит заполнение массива случайными числами с помощью цикла for, генератора случайных чисел и
// распределения.
// После заполнения массива выводятся его элементы перед сортировкой с помощью цикла for и оператора std::cout.
// Измеряется время начала сортировки с использованием функции clock().
// Следующий блок кода представляет собой алгоритм сортировки вставками. Он проходит по элементам массива, начиная со
// второго, и вставляет каждый элемент на правильную позицию в уже отсортированной части массива.
// После завершения сортировки измеряется время окончания сортировки и вычисляется затраченное время.
// Выводятся отсортированные элементы массива с помощью цикла for и оператора std::cout.
// Расчитывается время выполнения сортировки в секундах и выводится.
// Выделенная динамическая память освобождается с помощью оператора delete[].

#include <iostream>
#include <random>
#include <ctime>

int main()
{
	// Инициализация генератора случайных чисел с использованием std::random_device
	std::random_device rd;
	std::mt19937 gen(rd());

	// Создание распределения случайных чисел от 0 до 49
	std::uniform_int_distribution<int> dist(0, 49);

	// Объявление переменной для хранения размера массива
	int my_size {};
	size_t i {};

	// Запрос у пользователя ввода размера массива
	std::cout << "Enter the size of the array = ";
	std::cin >> my_size;

	// Выделение динамической памяти для массива типа int размером my_size
	int* pmas = new int[my_size];

	// Заполнение массива случайными числами
	for (i = 0; i < my_size; ++i)
	{
		pmas[i] = dist(gen);
	}

	// Вывод элементов массива перед сортировкой
	std::cout << "\nBefore insertion sort:\n";
	for (i = 0; i < my_size; ++i)
	{
		std::cout << i << " [" << pmas[i] << "]\n";
	}
	std::cout << '\n';

	// Измерение времени начала сортировки
	clock_t t {};
	t = clock();

	// Алгоритм сортировки методом вставки
	for (i = 1; i < my_size; ++i)
	{
		int key = pmas[i];
		int j = i - 1;
		while (j >= 0 && pmas[j] > key)
		{
			pmas[j + 1] = pmas[j];
			pmas[j] = key;
			j--;
		}
	}

	// Измерение времени окончания сортировки и вычисление затраченного времени
	t = clock() - t;

	// Вывод отсортированных элементов массива
	std::cout << "After insertion sort:\n";
	for (i = 0; i < my_size; ++i)
	{
		std::cout << i << " [" << pmas[i] << "]\n";
	}
	std::cout << '\n';

	// Расчет времени выполнения сортировки в секундах
	double time_insert = static_cast<double>(t) / CLOCKS_PER_SEC;

	// Вывод времени выполнения сортировки
	std::cout << "Insertion sort execution time = " << std::fixed << time_insert << " seconds" << '\n';

	// Освобождение выделенной динамической памяти
	delete[] pmas;

	return 0;
}
