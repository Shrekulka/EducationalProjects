// Пузырьковая сортировка в прямом порядке (от начала к концу массива):

// Данный код представляет собой пример пузырьковой сортировки для сортировки массива в прямом порядке (от начала к
// концу). Он использует случайные числа для заполнения массива и выводит шаги сортировки в виде таблицы.
// Код начинается с подключения необходимых заголовочных файлов, таких как <iostream> для ввода/вывода данных, и
// <random> для генерации случайных чисел.
// Затем инициализируется генератор случайных чисел std::mt19937 с использованием std::random_device для получения
// случайного зерна. Создается также распределение std::uniform_int_distribution<int>, которое генерирует случайные
// числа от 0 до 49.
// Далее пользователю предлагается ввести размер массива, который сохраняется в переменной size.
// Выделяется динамическая память для массива целых чисел размером size с использованием оператора new. Массив
// инициализируется нулями.
// Затем происходит заполнение массива случайными числами с помощью цикла for и генератора случайных чисел.
// После заполнения массива выводится исходный массив с помощью цикла for и оператора std::cout.
// Далее объявляются переменные swaps и temp, которые будут использоваться во время сортировки.
// Выводится заголовок "The trace table looks like :" для отображения таблицы промежуточных состояний массива во время
// сортировки.
// Затем следует основной блок пузырьковой сортировки с двумя вложенными циклами for. Внутренний цикл проходит по
// элементам массива и сравнивает каждый элемент с его соседним. Если текущий элемент больше следующего, происходит
// обмен значениями и инкрементируется счетчик swaps. Затем выводится таблица промежуточных состояний массива.
// После завершения сортировки выводится заголовок "The resulting array looks like :" и отображается отсортированный
// массив.
// В конце освобождается выделенная память с помощью оператора delete[].

#include <iostream>
#include <random>

int main()
{

	// Инициализация генератора случайных чисел с использованием std::random_device
	std::random_device rd;
	std::mt19937 gen(rd());

	// Создание распределения случайных чисел от 0 до 49
	std::uniform_int_distribution<int> dist(0, 49);

	int size {}; // Переменная для хранения размера массива
	size_t i {}; // Счетчик для циклов

	std::cout << "Enter the size of the array = ";
	std::cin >> size; // Ввод размера массива с клавиатуры

	int* pmas = new int[size] {}; // Выделение памяти для массива с инициализацией нулевыми значениями
	// Заполнение массива случайными числами
	for (i = 0; i < size; i++)
	{
		pmas[i] = dist(gen);
	}
	// Вывод исходного массива
	for (i = 0; i < size; i++)
	{
		std::cout << pmas[i] << ' ';
	}

	int swaps {}; // Счетчик перестановок
	int temp {}; // Временная переменная для обмена значениями

	std::cout << "\n\nThe trace table looks like :\n";
	// Пузырьковая сортировка
	for (i = 0; i < size; i++)
	{
		std::cout << '\n';
		for (size_t j = 0; j < size - i; j++)
		{
			if (pmas[j] > pmas[j + 1]) // Сравнение двух соседних элементов массива
			{
				swaps++; // Увеличение счетчика перестановок
				temp = pmas[j + 1];    // Сохранение значения элемента, находящегося на следующей позиции (b)
				pmas[j + 1] = pmas[j]; // Присваивание текущего значения элемента следующему элементу (b = a)
				pmas[j] = temp;        // Присваивание сохраненного значения следующему элементу (a = b)
			}
			// Вывод таблицы промежуточных состояний массива во время сортировки
			for (size_t k = 0; k < size; k++)
			{
				std::cout << pmas[k] << ' ';
			}
			std::cout << '\n';
		}
	}

	std::cout << "\nThe resulting array looks like :\n";
	// Вывод отсортированного массива
	for (i = 0; i < size; i++)
	{
		std::cout << pmas[i] << ' ';
	}
	std::cout << "\n\nNumber of substitutions = " << swaps << '\n'; // Вывод количества перестановок

	delete[] pmas; // Освобождение памяти, выделенной для массива

	return 0;
}
