// Пузырьковая сортировка в обратном порядке (от конца к началу массива):

// Код представляет собой реализацию пузырьковой сортировки в обратном порядке для массива. В начале кода происходит
// инициализация генератора случайных чисел с использованием std::random_device и std::mt19937, а также создание
// распределения случайных чисел от 0 до 49 с помощью std::uniform_int_distribution.
// Затем пользователю предлагается ввести размер массива, и выделяется динамическая память для массива типа int размером
// size. Массив заполняется случайными числами, которые генерируются с использованием генератора случайных чисел.
// После заполнения массива происходит вывод его содержимого. Затем инициализируются переменные swaps (счетчик
// перестановок) и temp (временная переменная).
// Далее начинается пузырьковая сортировка в обратном порядке. Во внешнем цикле происходит итерация по элементам
// массива, начиная с конца. Во внутреннем цикле происходит сравнение текущего элемента с его следующим соседом, и если
// текущий элемент больше следующего, то они меняются местами. При этом счетчик перестановок увеличивается, а также
// выводится текущее состояние массива после каждой перестановки.
// После завершения сортировки выводится отсортированный массив, а также количество перестановок, произведенных во время
// сортировки.
// В конце освобождается выделенная динамическая память под массив.
// Таким образом, код реализует пузырьковую сортировку для массива в обратном порядке и демонстрирует промежуточные шаги
// сортировки на каждой итерации.

#include <iostream>
#include <random>

int main()
{
// Инициализация генератора случайных чисел с использованием std::random_device
	std::random_device rd;
	std::mt19937 gen(rd());

// Создание распределения случайных чисел от 0 до 49
	std::uniform_int_distribution<int> dist(0, 49);

	int size {};
	size_t i {};

	std::cout << "Enter the size of the array = ";
	std::cin >> size;

	int *pmas = new int[size]{}; // выделение динамической памяти под массив

	// заполнение массива случайными числами
	for (i = 0; i < size; i++)
	{
		pmas[i] = dist(gen);
	}
	// вывод массива
	for (i = 0; i < size; i++)
	{
		std::cout << pmas[i] << ' ';
	}

	int swaps {}, temp {};

	std::cout << "\nThe trace table looks like :\n";

	// пузырьковая сортировка
	for (i = size - 1; i > 0; i--)
	{
		std::cout << '\n';
		for (size_t j = 0; j < i; j++)
		{
			if (pmas[j] > pmas[j + 1]) // если текущий элемент больше следующего, то меняем их местами
			{
				swaps++; // увеличиваем счетчик перестановок
				temp = pmas[j];    // сохраняем значение текущего элемента во временной переменной
				pmas[j] = pmas[j + 1]; // меняем текущий элемент на следующий
				pmas[j + 1] = temp;        // меняем следующий элемент на сохраненный текущий
			}
			// вывод массива после каждой перестановки
			for (size_t k = 0; k < size; k++)
			{
				std::cout << pmas[k] << ' ';
			}
			std::cout << '\n';
		}
	}

	std::cout << "The resulting array looks like :\n";

	// вывод отсортированного массива
	for (i = 0; i < size; i++)
	{
		std::cout << pmas[i] << ' ';
	}

	// вывод количества перестановок
	std::cout << "\nNumber of substitutions = " << swaps << '\n';

	delete[] pmas; // освобождение памяти

	return 0;
}
