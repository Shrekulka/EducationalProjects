// Сортировка методом пузырька с использованием флага

// В начале инициализируется генератор случайных чисел с помощью std::random_device и std::mt19937. Создается
// распределение случайных чисел от 0 до 49 с помощью std::uniform_int_distribution.
// Пользователю предлагается ввести размер массива, который сохраняется в переменную size. Затем выделяется динамическая
// память для массива типа int размером size с помощью оператора new.
// Далее происходит заполнение массива случайными числами с использованием генератора случайных чисел и распределения.
// Затем массив выводится на экран.
// Далее инициализируется переменная flag со значением false. Запускается цикл do-while, который выполняется, пока
// значение flag равно true. Внутри цикла происходит проход по массиву с помощью цикла for, где текущий элемент
// сравнивается с его соседом. Если текущий элемент больше следующего, то значения меняются местами с помощью функции
// std::swap, и переменная flag устанавливается в значение true. После завершения прохода по массиву, если на предыдущей
// итерации не было совершено ни одной перестановки, то значение flag остается false, и цикл завершается.
// После завершения сортировки массива, отсортированный массив выводится на экран. Затем выделенная динамическая память
// освобождается с помощью оператора delete[].
// Таким образом, код реализует сортировку пузырьком для массива в порядке возрастания с использованием случайных чисел
// для заполнения и демонстрирует этапы сортировки на каждой итерации.

#include <iostream>
#include <random>

int main()
{
	// Инициализация генератора случайных чисел с использованием std::random_device
	std::random_device rd;
	std::mt19937 gen(rd());

	// Создание распределения случайных чисел от 0 до 49
	std::uniform_int_distribution<int> dist(0, 49);

	int size {};
	size_t i {};

	std::cout << "Enter the size of the array = ";
	std::cin >> size;

	int* pmas = new int[size] {}; // Выделение динамической памяти для массива

	// Заполнение массива случайными числами
	for (i = 0; i <= size; i++)
	{
		pmas[i] = dist(gen);
	}

	// Вывод содержимого массива
	std::cout << "\nBefore sort:\n";
	for (i = 0; i <= size; i++)
	{
		std::cout << pmas[i] << ' ';
	}
	std::cout << '\n';

	bool flag {}; // Флаг для отслеживания состояния массива

	do // Повторять до тех пор, пока массив не будет отсортирован
	{
		flag = false; // Сброс флага перед каждой итерацией

		// Проход по элементам массива
		for (i = 0; i < size; i++)
		{
			if (pmas[i] > pmas[i + 1]) // Если текущий элемент больше следующего
			{
				std::swap(pmas[i], pmas[i + 1]); // Меняем элементы местами
				flag = true; // Устанавливаем флаг в true, чтобы продолжить сортировку
			}
		}
	} while (flag); // Повторять, пока флаг равен true

	// Вывод отсортированного массива
	std::cout << "\nThe resulting array looks like :\n";
	for (i = 0; i <= size; i++)
	{
		std::cout << pmas[i] << ' ';
	}

	delete[] pmas; // Освобождение выделенной динамической памяти

	return 0;
}
