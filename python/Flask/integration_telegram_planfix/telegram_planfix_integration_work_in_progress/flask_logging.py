# /pythonProject_1/flask_logging.py

import logging

# Уровень логирования (DEBUG - наиболее подробный уровень)
leve1 = logging.DEBUG

# Формат записей лога
# %(asctime)s: Это подставляемый параметр, который будет заменен на текущую дату и время в формате, указанном в
# настройках логирования. asctime расшифровывается как "as available time", и s указывает, что это строковое
# представление времени.

# |%(filename)s: Здесь filename представляет имя файла, в котором было выполнено логирование. %s означает, что это
# строковый параметр.

# |%(lineno)04d: lineno представляет номер строки в исходном коде, откуда было выполнено логирование. %04d указывает на
# форматирование числа: 4 знака, дополняемые нулями впереди (если необходимо).

# -%(levelname)-5s: levelname представляет уровень логирования (например, DEBUG, INFO, WARNING и т.д.). %5s указывает,
# что это строка шириной в 5 символов, выравненная по правому краю. Дополнительный минус (-) указывает на выравнивание
# по левому краю.

# - |: Это просто символы, добавленные для создания разделителей между разными частями лог-записи.

# %(message)s: Это место, где выводится само сообщение лога. %s здесь также означает строковый параметр.
format1 = '%(asctime)s |%(filename)s |%(lineno)04d-%(levelname)-5s| - | %(message)s |'

# Настройка логирования для записи в файл 'val.log'
# filemode='a' - режим добавления (append), новые записи добавляются в конец файла
logging.basicConfig(filename='val.log', format=format1, filemode='a', level=leve1)

# Создание обработчика для вывода логов в консоль
console_handler = logging.StreamHandler()

# Установка уровня логирования для обработчика консоли
console_handler.setLevel(leve1)

# Создание форматтера для форматирования записей лога
formatter = logging.Formatter(format1)

# Привязка форматтера к обработчику консоли
console_handler.setFormatter(formatter)

# Добавление обработчика консоли к корневому логгеру
logging.getLogger().addHandler(console_handler)

# Получение ссылки на корневой логгер
logger = logging.getLogger()

# Вывод информационного сообщения в лог
logger.info('hello')
