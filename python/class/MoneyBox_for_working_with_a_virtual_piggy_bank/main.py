"""Реализуйте класс MoneyBox, для работы с виртуальной копилкой.
Каждая копилка имеет ограниченную вместимость, которая выражается целым числом – количеством монет, которые можно
положить в копилку. Класс должен поддерживать информацию о количестве монет в копилке, предоставлять возможность
добавлять монеты в копилку и узнавать, можно ли добавить в копилку ещё какое-то количество монет, не превышая ее
вместимость.

Класс должен иметь следующий вид

class MoneyBox:
    def __init__(self, capacity):
        # конструктор с аргументом – вместимость копилки

    def can_add(self, v):
        # True, если можно добавить v монет, False иначе

    def add(self, v):
        # положить v монет в копилку

При создании копилки, число монет в ней равно 0.

Примечание:
Гарантируется, что метод add(self, v) будет вызываться только если can_add(self, v) – True.
"""


########################################################################################################################

class MoneyBox:
    def __init__(self, capacity):
        self.capacity = capacity  # Инициализация переменной capacity с переданным значением
        self.count = 0  # Инициализация переменной count со значением 0, счетчик монет в копилке

    def can_add(self, v):
        return self.count + v <= self.capacity  # Проверка, есть ли достаточно места для добавления v монет

    def add(self, v):
        if self.can_add(v):  # Если можно добавить v монет
            self.count += v  # Увеличение счетчика монет на v


########################################################################################################################

p = MoneyBox(20)  # Создание объекта класса MoneyBox с capacity = 20
print(p.can_add(5))  # Выводит True, так как после добавления 5 монет общее количество монет (5) <= capacity (20)

p.add(5)  # Добавление 5 монет, общее количество монет становится 5
print(p.count)  # Выводит 5, текущее количество монет в копилке
print(p.can_add(20))  # Выводит True, так как после добавления 20 монет общее количество монет (25) <= capacity (20)

p.add(20)  # Добавление 20 монет, общее количество монет становится 25
print(p.count)  # Выводит 25, текущее количество монет в копилке
print(p.can_add(1))  # Выводит False, так как после добавления 1 монеты общее количество монет (26) > capacity (20)
