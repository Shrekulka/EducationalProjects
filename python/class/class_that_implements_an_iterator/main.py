"""Класс, который реализует итератор
Код представляет из себя определение класса RandomIterator, который реализует итератор. Каждый элемент итератора -
это случайное число.
"""

from random import random


# Объявляется новый класс RandomIterator, который будет представлять собой итератор.
class RandomIterator:
    # Этот метод возвращает сам объект итератора. Он не выполняет никаких действий, просто позволяет итератору быть
    # итерируемым.
    def __iter__(self):
        return self

    # В конструкторе класса задаются начальные значения для итератора: количество элементов, которые он должен создать,
    # и текущий индекс (который изначально равен нулю).
    def __init__(self, quantity):
        self.quantity = quantity
        self.i = 0

    # Метод __next__ возвращает следующий элемент итератора. Если было создано необходимое количество элементов
    # (self.i == self.quantity), то метод выбрасывает исключение StopIteration.
    def __next__(self):
        if self.i < self.quantity:
            self.i += 1
            return random()
        else:
            raise StopIteration


########################################################################################################################
# В этой части кода создается объект итератора с 5 элементами, и проходясь по каждому элементу итератора, он выводит
# его значение в строку через пробел. Значения, которые будут выведены при каждом выполнении программы, будут
# отличаться, так как они являются случайными.
for x in RandomIterator(5):
    print(x, end=' ')
    # 0.9789393322925168 0.15155182990438454 0.11557205472330079 0.14703031998173655 0.46090602607747644


# или через generator
# Создаем генератор функцию random_generator(quantity) с аргументом quantity, которая будет генерировать случайные
# числа в количестве quantity штук.
def random_generator(quantity):
    for i in range(quantity):
        # Используем ключевое слово yield для создания генератора. Каждый раз, когда вызывается функция, она не
        # выполняется полностью, а приостанавливается на операторе yield и возвращает текущее значение. При следующем
        # вызове функция продолжит работу с того места, где остановилась.
        yield random()


# В цикле for перебираем все значения, возвращаемые генератором, и выводим их на экран с помощью функции print(i).
for i in random_generator(6):
    # В цикле for перебираем все значения, возвращаемые генератором, и выводим их на экран с помощью функции print(i).
    print(i)
