"""Одно из применений множественного наследование – расширение функциональности класса каким-то заранее определенным
способом. Например, если нам понадобится логировать какую-то информацию при обращении к методам класса.
Рассмотрим класс Loggable:
import time

class Loggable:
    def log(self, msg):
        print(str(time.ctime()) + ": " + str(msg))
У него есть ровно один метод log, который позволяет выводить в лог (в данном случае в stdout) какое-то сообщение,
добавляя при этом текущее время.
Реализуйте класс LoggableList, унаследовав его от классов list и Loggable таким образом, чтобы при добавлении элемента
в список посредством метода append в лог отправлялось сообщение, состоящее из только что добавленного элемента.

Примечание
Ваша программа не должна содержать класс Loggable. При проверке вашей программе будет доступен этот класс, и он будет
содержать метод log, описанный выше.
"""

import time


# Определяем базовый класс Loggable, который содержит метод log
class Loggable:
    def log(self, msg):
        print(str(time.ctime()) + ": " + str(msg))


# Определяем класс LoggableList, наследующийся от классов list и Loggable
class LoggableList(list, Loggable):
    # Переопределяем метод append класса list
    def append(self, element):
        # Вызываем метод append базового класса list
        super().append(element)
        # Вызываем метод log из базового класса Loggable, передавая в него только что добавленный элемент
        self.log(element)


########################################################################################################################
# Создаем экземпляр класса LoggableList
log_list = LoggableList()
# Добавляем элементы в список при помощи метода append
log_list.append(1)  # Выводит "Thu Jul 15 16:13:07 2021: 1"
log_list.append(2)  # Выводит "Thu Jul 15 16:13:07 2021: 2"
