# ai_checklist_guardian/handlers/client.py
import traceback

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

from create_bot import bot, dp
from data_base.sqlite_db import sql_add_report, get_report
from keyboards.client_kb import kb_client_locations, kb_checklist
from logger import logger
from models.user_data import UserData
from services.openai_service import OpenAIService
from states import UserSteps

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–ª—É–∂–±—ã OpenAI
openai_service = OpenAIService()

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = UserData()


# –•–µ–Ω–¥–ª–µ—Ä –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message) -> None:
    """
         Handle the /start command, initialize the conversation and ask the user to choose a location.

         Args:
             message: The incoming message.
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(message.from_user.id, f"Hello, {message.from_user.first_name}!"
                                                     f" üëã\nLet's get to work.")
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–∑ —á–∞—Ç–∞
        await message.delete()
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é
        await message.answer("Choose a location:", reply_markup=kb_client_locations)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LOCATION
        await UserSteps.LOCATION.set()
    except Exception as e:
        detailed_send_message_error = traceback.format_exc()
        await message.reply(f"An error occurred: {str(e)}\n{detailed_send_message_error}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(state=UserSteps.LOCATION, content_types=types.ContentTypes.TEXT)
async def process_location(message: types.Message) -> None:
    """
       Handle the user's chosen location, ask for a checklist option, and set the user's state to CHECKLIST.

       Args:
           message: The incoming message.
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        location = message.text
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é –≤ user_data
        user_data.location = location
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —á–µ–∫-–ª–∏—Å—Ç–∞
        await message.answer("Choose a checklist option:", reply_markup=kb_checklist)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CHECKLIST
        await UserSteps.CHECKLIST.set()
    except Exception as e:
        detailed_send_message_error = traceback.format_exc()
        await message.reply(f"An error occurred: {str(e)}\n{detailed_send_message_error}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞
@dp.message_handler(state=UserSteps.CHECKLIST, content_types=types.ContentTypes.TEXT)
async def process_checklist(message: types.Message, state: FSMContext) -> None:
    """
       Handle the user's chosen checklist option and set the user's state accordingly.

       Args:
           message: The incoming message.
           state: The FSMContext to manage the user's state.
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        option = message.text
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ –≤ user_data
        user_data.option = option
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–ø—Ü–∏—é "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        if option == "Leave comment":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ COMMENT
            await UserSteps.COMMENT.set()
            # –ü—Ä–æ—Å—å–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            await message.answer("Leave a comment:")
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        else:
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ REPORT –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞
            await UserSteps.REPORT.set()
            await send_report(message, state, checklist=option)
    except Exception as e:
        detailed_send_message_error = traceback.format_exc()
        await message.reply(f"An error occurred: {str(e)}\n{detailed_send_message_error}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.message_handler(state=UserSteps.COMMENT, content_types=types.ContentTypes.TEXT)
async def process_comment(message: types.Message) -> None:
    """
       Handle the user's comment and proceed to the next step in the conversation.

       Args:
           message: The incoming message.
    """
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        comment_text = message.text
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ user_data
        user_data.comment = comment_text
        # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        await message.answer("Now, please upload a photo.")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ PHOTO
        await UserSteps.PHOTO.set()
    except Exception as e:
        detailed_send_message_error = traceback.format_exc()
        await message.reply(f"An error occurred: {str(e)}\n{detailed_send_message_error}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@dp.message_handler(state=UserSteps.PHOTO, content_types=types.ContentTypes.PHOTO)
async def process_photo(message: types.Message, state: FSMContext) -> None:
    """
        Handle the user's uploaded photo, process it, and proceed to the next step in the conversation.

        Args:
            message: The incoming message.
            state: The FSMContext to manage the user's state.
    """
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        photo_link = message.photo[-1].file_id
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ user_data
        user_data.photo_link = photo_link
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ REPORT
        await UserSteps.REPORT.set()
        # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞
        await send_report(message, state, checklist=user_data.option)
    except Exception as e:
        detailed_send_message_error = traceback.format_exc()
        await message.reply(f"An error occurred: {str(e)}\n{detailed_send_message_error}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –Ω–∞ OpenAI
async def send_report(message: types.Message, state: FSMContext, checklist) -> None:
    """
        Handle the process of generating and sending a report to OpenAI.

        Args:
            message: The incoming message.
            state: The FSMContext to manage the user's state.
            checklist: The chosen checklist option.
    """
    user_data_local = None
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ state
        data = await state.get_data()
        for key, value in data.items():
            logger.info(f"Key: {key}, Value: {value}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ UserData
        user_data_local = UserData(
            location=user_data.location,
            option=user_data.option,
            comment=user_data.comment,
            photo_link=user_data.photo_link,
            report=user_data.report  # report=user_data_local.get("report")
        )
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –æ–±—ä–µ–∫—Ç–∞ user_data_local
        user_data_dict = vars(user_data_local)
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π
        for key, value in user_data_dict.items():
            logger.info(f"Key: {key}, Value: {value}")
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ user_data
        report_text = user_data_local.generate_report()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ OpenAI
        ai_response = openai_service.send_report(report_text, checklist=checklist)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"Report analysis:\n{ai_response}")
    except Exception as e:
        detailed_send_message_error = traceback.format_exc()
        await message.reply(f"An error occurred: {str(e)}\n{detailed_send_message_error}")

    finally:
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
            await sql_add_report(user_data_local)
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_id = message.from_user.id
            report_from_db = await get_report(user_id)

            if report_from_db:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(user_id, report_from_db)
            else:
                await bot.send_message(user_id, "Report not found.")
        except Exception as e:
            detailed_send_message_error = traceback.format_exc()
            await message.reply(f"An error occurred while working with the database:"
                                f" {str(e)}\n{detailed_send_message_error}")
        finally:
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await state.finish()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –∏—Ö –≤ —Ñ–∞–π–ª bot_telegram
def register_handlers_client(dp: Dispatcher) -> None:
    """
        Register all handlers for the client part of the bot.

        Args:
            dp: The Dispatcher instance.
    """
    dp.register_message_handler(cmd_start, commands=["start"])
    dp.register_message_handler(process_location, state=UserSteps.LOCATION, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(process_checklist, state=UserSteps.CHECKLIST, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(process_comment, state=UserSteps.COMMENT, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(process_photo, state=UserSteps.PHOTO, content_types=types.ContentTypes.PHOTO)
    dp.register_message_handler(send_report, state=UserSteps.REPORT, content_types=types.ContentTypes.TEXT)
