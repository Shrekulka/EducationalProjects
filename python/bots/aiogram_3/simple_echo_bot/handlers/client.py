# simple_echo_bot/handlers/client.py
import traceback

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message

from create_bot import bot, dp


# @dp.message(Command(commands=["start"]))
async def process_start_command(message: Message) -> None:
    """Handler for the "/start" command.

        Args:
            message (Message): Incoming message object.

        Returns:
            None
    """
    try:
        # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        print(message.model_dump_json(indent=4, exclude_none=True))
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(message.from_user.id, f"Hello, {message.from_user.first_name}!"
                                                     f" üëã\nMy name is Echo-bot!\nWrite me something")
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start –∏–∑ —á–∞—Ç–∞
        await message.delete()
    except Exception as e:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        detailed_send_message_error = traceback.format_exc()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        await message.reply(f"An error occurred: {str(e)}\n{detailed_send_message_error}")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help"
# @dp.message(Command(commands=['help']))
async def process_help_command(message: Message) -> None:
    """Handler for the "/help" command.

        Args:
            message (Message): Incoming message object.

        Returns:
            None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("Write me something and in response\nI will send you your message")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
# @dp.message()
async def handle_sticker(message: Message) -> None:
    """Handler for stickers.

    Args:
        message (Message): Incoming message object.

    Returns:
        None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply("Here's your sticker")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer_sticker(sticker=message.sticker.file_id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ
# @dp.message(F.photo)
async def handle_photo(message: Message) -> None:
    """Handler for photos.

    Args:
        message (Message): Incoming message object.

    Returns:
        None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply("Here's your photo")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —á–∞—Ç
    await message.answer_photo(photo=message.photo[-1].file_id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ
# @dp.message(F.video)
async def handle_video(message: Message) -> None:
    """Handler for videos.

    Args:
        message (Message): Incoming message object.

    Returns:
        None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply("Here's your video")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ —á–∞—Ç
    await message.answer_video(video=message.video.file_id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–æ–∫
# @dp.message(F.video_note)
async def handle_video_note(message: Message) -> None:
    """Handler for video notes.

    Args:
        message (Message): Incoming message object.

    Returns:
        None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply("Here's your video message")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫—É –≤ —á–∞—Ç
    await message.answer_video_note(video_note=message.video_note.file_id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
# @dp.message(F.audio)
async def handle_audio(message: Message) -> None:
    """Handler for audio files.

    Args:
        message (Message): Incoming message object.

    Returns:
        None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply("Here's your audio")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —á–∞—Ç
    await message.answer_audio(audio=message.audio.file_id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# @dp.message(F.voice)
async def handle_voice(message: Message) -> None:
    """Handler for voice messages.

    Args:
        message (Message): Incoming message object.

    Returns:
        None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply("Here's your voice message")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    await message.answer_voice(voice=message.voice.file_id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
# @dp.message(F.document)
async def handle_document(message: Message) -> None:
    """Handler for documents.

    Args:
        message (Message): Incoming message object.

    Returns:
        None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply("Here's your document")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ —á–∞—Ç
    await message.answer_document(document=message.document.file_id)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π
# @dp.message(F.location)
async def handle_location(message: Message) -> None:
    """Handler for locations.

    Args:
        message (Message): Incoming message object.

    Returns:
        None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply("Here's your location")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —á–∞—Ç
    await message.answer_location(latitude=message.location.latitude, longitude=message.location.longitude)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
# @dp.message(F.contact)
async def handle_contact(message: Message) -> None:
    """Handler for contacts.

    Args:
        message (Message): Incoming message object.

    Returns:
        None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply("Here's your contact")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ —á–∞—Ç
    await message.answer_contact(phone_number=message.contact.phone_number, first_name=message.contact.first_name)


# –£ aiogram –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤ —á–∞—Ç –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (Audio, Video,
# Sticker, Animation, Document, Voice).
# @dp.message()
async def send_copy_message(message: Message) -> None:
    """
       Handler to send a copy of the message.

       Args:
           message (Message): Incoming message object.

       Returns:
           None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.reply("Here is your response from the send_copy handler")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        await message.send_copy(chat_id=message.chat.id)  # await message.copy_to(chat_id=message.chat.id)
    except TypeError:
        await message.reply(text="This type of update is not supported by the send_copy method")


# @dp.message()
async def handle_other_messages(message: Message) -> None:
    """Handler for text messages.

    Args:
        message (Message): Incoming message object.

    Returns:
        None
    """
    # –í—ã–≤–æ–¥–∏–º –∞–ø–¥–µ–π—Ç –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(message.model_dump_json(indent=4, exclude_none=True))
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.reply(text=f"You wrote me such a message:\n{message.text}\nand I write you the same thing")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –∏—Ö –≤ —Ñ–∞–π–ª bot_telegram
# @dp.message()
def register_handlers_client(dp: Dispatcher) -> None:
    """
        Register all handlers for the client part of the bot.

        Args:
            dp: The Dispatcher instance.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
    dp.message.register(process_start_command, Command(commands='start'))
    dp.message.register(process_help_command, Command(commands='help'))
    dp.message.register(handle_sticker, F.sticker)
    dp.message.register(handle_photo, F.photo)
    dp.message.register(handle_video, F.video)
    dp.message.register(handle_video_note, F.video_note)
    dp.message.register(handle_audio, F.audio)
    dp.message.register(handle_voice, F.voice)
    dp.message.register(handle_document, F.document)
    dp.message.register(handle_location, F.location)
    dp.message.register(handle_contact, F.contact)
    dp.message.register(send_copy_message)
    dp.message.register(handle_other_messages)
