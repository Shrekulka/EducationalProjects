"""Транскрибация текста из аудиофайла"""

# pip install openai-whisper
import os
import whisper


def speech_recognition(model='base'):
    """
    Функция для транскрибации текста из аудиофайла.

    :param model: Модель для распознавания речи
    """
    # Запрашиваем путь к аудиофайлу
    audio_path = input("Введите путь к аудиофайлу (например, /путь/к/файлу.mp3): ")

    # Проверяем существование файла
    if not os.path.exists(audio_path):
        print("Ошибка: Файл не найден.")
        return

    # Проверяем расширение файла
    _, ext = os.path.splitext(audio_path)
    supported_extensions = ['.wav', '.mp3', '.ogg']  # Добавьте поддерживаемые расширения
    if ext.lower() not in supported_extensions:
        print("Ошибка: Неподдерживаемый тип файла.")
        print("Поддерживаемые типы файлов:", ', '.join(supported_extensions))
        return

    # Проверяем размер файла
    max_file_size_bytes = 100 * 1024 * 1024  # Максимальный размер файла (в байтах)
    if os.path.getsize(audio_path) > max_file_size_bytes:
        print("Ошибка: Слишком большой размер файла.")
        print("Пожалуйста, выберите файл размером до", max_file_size_bytes, "байт.")
        return

    # Запрашиваем путь для сохранения результатов
    save_path = input("Введите путь для сохранения результатов (например, /путь/для/сохранения/результата.txt): ")

    try:
        # Загружаем модель
        speech_model = whisper.load_model(model)

        print('Запущен процесс транскрибации. Пожалуйста, подождите...')

        # Транскрибируем аудиофайл
        result = speech_model.transcribe(audio_path, fp16=False)

        # Сохраняем результаты в файл
        with open(save_path, 'w') as file:
            file.write(result['text'])

        print("Транскрибация завершена.")
    except Exception as e:
        print("Произошла ошибка при транскрибации:")
        print(str(e))


def main():
    """
    Основная функция программы для выбора модели и запуска транскрибации.

    Выполняет следующие шаги:
    1. Выводит доступные модели в терминале.
    2. Запрашивает у пользователя выбор модели.
    3. Запускает процесс транскрибации с выбранной моделью.


В библиотеке `whisper` доступны различные модели для транскрибации речи. Вот краткое описание каждой модели:

1. Tiny: Модель с небольшим размером, обеспечивает базовую функциональность распознавания речи. Хотя она может иметь
   ограниченные возможности в точности и покрытии, она является легковесным вариантом для простых задач транскрибации.

2. Base: Базовая модель для распознавания речи. Эта модель обладает хорошей точностью и обширным покрытием языковых
   данных. Она может быть использована для широкого спектра задач транскрибации и обеспечивает хорошие результаты.

3. Small: Модель среднего размера, которая обеспечивает баланс между точностью и производительностью. Она может быть
   полезна, когда требуется достаточная точность, но при этом нужно управлять потреблением ресурсов.

4. Medium: Средняя модель для распознавания речи, обладающая улучшенной точностью и покрытием по сравнению с более
   легкими моделями. Эта модель может быть полезна в более требовательных сценариях транскрибации, где требуется высокая
   точность приемлемой производительности.

5. Large: Крупная модель с высокой точностью и обширным покрытием данных. Она предлагает наилучшие результаты для задач
   транскрибации, но может потребовать больше ресурсов для работы.

При выборе модели следует учитывать баланс между точностью и производительностью, а также требованиями конкретной
задачи транскрибации.
    """

    # Создаем словарь моделей, где ключи - цифры, значения - названия моделей
    models = {1: 'tiny', 2: 'base', 3: 'small', 4: 'medium', 5: 'large'}

    # Выводим доступные модели в терминале
    for key, value in models.items():
        print(f'{key}: {value}')

    try:
        # Запрашиваем у пользователя выбор модели
        model = int(input('Выберите модель, введя цифру от 1 до 5: '))

        # Проверяем, что выбранная модель существует в словаре моделей
        if model not in models.keys():
            print('Ошибка: Некорректный выбор модели.')
            print('Доступные модели:')
            for key, value in models.items():
                print(f'{key}: {value}')
            return

        # Вызываем функцию транскрибации, передавая выбранную модель
        speech_recognition(model=models[model])

    except KeyboardInterrupt:
        print('Процесс транскрибации был прерван.')


if __name__ == '__main__':
    main()
