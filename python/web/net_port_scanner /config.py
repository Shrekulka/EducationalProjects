# net_port_scanner/config.py

"""
Этот модуль содержит класс настроек для конфигурации асинхронного сканера портов.
Он использует библиотеку Pydantic для управления настройками, которые могут быть загружены из файла окружения (.env).
"""

from pydantic.v1 import BaseSettings


class Settings(BaseSettings):
    """
    Класс для хранения настроек приложения сканера портов.

    Атрибуты:
    ----------
    MAX_CONCURRENT_TASKS : int
        Максимальное количество одновременных асинхронных задач, которое может быть выполнено.

    CONNECT_TIMEOUT : int
        Таймаут в секундах для подключения к порту.

    DEFAULT_START_PORT : int
        Начальный порт для сканирования (по умолчанию: 1).

    DEFAULT_END_PORT : int
        Конечный порт для сканирования (по умолчанию: 65535).

    DEFAULT_OUTPUT_FILE : str
        Путь к файлу, в который будут сохранены результаты сканирования в формате CSV.

    THREAD_POOL_MAX_WORKERS : int
        Максимальное количество потоков, которое будет использоваться в пуле потоков.

    MAX_RETRIES : int
        Максимальное количество попыток для получения имени сервиса по порту.

    RETRY_DELAY : float
        Задержка в секундах между попытками.
    """

    # Максимальное количество одновременных асинхронных задач, которое может быть выполнено.
    MAX_CONCURRENT_TASKS: int = 200

    # Таймаут в секундах для подключения к порту.
    CONNECT_TIMEOUT: int = 5

    # Начальный порт для сканирования.
    DEFAULT_START_PORT: int = 1

    # Конечный порт для сканирования.
    DEFAULT_END_PORT: int = 65535

    # Путь к файлу, в который будут сохранены результаты сканирования.
    DEFAULT_OUTPUT_FILE: str = "./data/port_scan_results.csv"

    # Максимальное количество потоков, которое будет использоваться в пуле потоков.
    THREAD_POOL_MAX_WORKERS: int = 20

    # Максимальное количество попыток для получения имени сервиса по порту.
    MAX_RETRIES: int = 3

    # Задержка в секундах между попытками.
    RETRY_DELAY: float = 0.5

    class Config:
        """
        Класс Config используется для настройки поведения класса Settings.

        Атрибуты:
        ----------
        env_file : str
            Имя файла окружения, из которого загружаются настройки.

        env_file_encoding : str
            Кодировка файла окружения.
        """
        env_file: str = ".env"
        env_file_encoding: str = "utf-8"


# Создаем экземпляр класса Settings для хранения конфигурационных данных.
config: Settings = Settings()
