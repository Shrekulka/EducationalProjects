"""
Django settings for book_shop project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-itsgdotwz%i5jv1514b0+_)2(90mk^+d&^6et4ma^b@_zq1dn*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    "debug_toolbar",  # Приложение для отладочной панели Django Debug Toolbar

    'shop.apps.ShopConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Промежуточное ПО для интеграции отладочной панели Django Debug Toolbar в проект.
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'book_shop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'book_shop.wsgi.application'

# Настройки для работы с sqlite3
########################################################################################################################
# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Раздел настроек для базы данных по умолчанию в Django
# DATABASES = {
#     'default': {                                 # Настройки для базы данных по умолчанию
#         'ENGINE': 'django.db.backends.sqlite3',  # Используем движок SQLite3
#         'NAME': BASE_DIR / 'db.sqlite3',         # Имя файла базы данных, расположенного в корневой директории проекта
#     }
# }
########################################################################################################################

# Настройки для работы с PostgreSQL
########################################################################################################################
DATABASES = {
    'default': {                                    # Настройки для базы данных по умолчанию
        'ENGINE': 'django.db.backends.postgresql',  # Используем движок PostgreSQL
        'NAME': 'book_shop_base',                   # Имя базы данных PostgreSQL
        'USER': 'book_shop_user',                   # Имя пользователя для подключения к PostgreSQL
        'PASSWORD': '1111',                         # Пароль для подключения к PostgreSQL
        'HOST': 'localhost',                        # Хост, на котором размещена база данных PostgreSQL
        'PORT': '5432',                             # Порт, на котором работает PostgreSQL
    }
}
########################################################################################################################


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Настройки интернационализации и локализации в Django.
########################################################################################################################
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru-Ru'    # Код языка для сайта, указывающий на русский язык и его региональные особенности.
TIME_ZONE = 'Europe/Kiev'  # Часовой пояс сайта, установленный на время Киева в Европе.
USE_I18N = True            # Указывает на необходимость использования интернационализации для поддержки различных языков
USE_TZ = True              # Указывает на использование часовых поясов в приложении, используя заданный TIME_ZONE.
########################################################################################################################

# Настройка статических и медиафайлов (CSS, JavaScript, Images)
########################################################################################################################
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# URL-путь для обслуживания статических файлов на веб-сайте.
STATIC_URL = '/static/'

# Директория, куда будут собираться статические файлы для развертывания веб-сайта.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Дополнительные директории, где Django будет искать статические файлы.
STATICFILES_DIRS = [BASE_DIR / 'static', ]

# Директория, где будут сохраняться загруженные медиафайлы (изображения, видео и т.д.).
MEDIA_ROOT = BASE_DIR / 'media'

# URL-путь для доступа к загруженным медиафайлам на веб-сайте.
MEDIA_URL = '/media/'
########################################################################################################################

# Список внутренних IP-адресов, с которых будет доступен отладочный панель.
########################################################################################################################
INTERNAL_IPS: list[str] = [
    # Добавляем локальный IP-адрес, который обычно используется при разработке на локальной машине.
    "127.0.0.1",
    # Дополнительные IP-адреса могут быть добавлены сюда по мере необходимости.
]
########################################################################################################################

# Тип поля первичного ключа по умолчанию.
########################################################################################################################
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
########################################################################################################################

# Настройки Django REST Framework (DRF) определяют, как будут обрабатываться входящие запросы и формироваться ответы API
########################################################################################################################
REST_FRAMEWORK = {
    # Классы, которые будут использоваться для формирования ответа, отправляемого клиенту.
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',  # Все ответы API будут преобразовываться в формат JSON.
    ),

    # Классы, которые будут использоваться для обработки данных, полученных в запросах от клиента.
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',  # Все данные, полученные в запросах, будут ожидаться в формате JSON.
    )
}
########################################################################################################################
