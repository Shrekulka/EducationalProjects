# backend/backend/settings.py

"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

import environ
from captcha.helpers import word_challenge, math_challenge, random_char_challenge
from celery.schedules import crontab
from celery.schedules import crontab

# Работа с env.dev
########################################################################################################################
# Импортируем библиотеку для работы с переменными окружения
env = environ.Env()

# Читаем файл .env.dev из указанного пути (./docker/env/.env.dev) и загружаем переменные окружения из него
environ.Env.read_env(env_file=Path('./docker/env/.env.dev'))

# Деплой Django на VPS в Docker контейнере с SSL
# environ.Env.read_env(env_file=Path('./docker/env/.env.prod'))
########################################################################################################################

# Определение базового пути проекта
########################################################################################################################
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
########################################################################################################################

# Быстрые настройки для разработки - неподходящие для продакшена
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
########################################################################################################################
# Секретный ключ, используемый для подписи куки, токенов и других объектов, используемых для безопасности приложения.
SECRET_KEY = env('SECRET_KEY')
########################################################################################################################

# Режим отладки
########################################################################################################################
# Определяет, будет ли включен режим отладки. Не следует использовать этот режим в продакшн-сервере.
DEBUG = int(env('DEBUG', default=1))
########################################################################################################################

# Разрешенные хосты
########################################################################################################################
# ALLOWED_HOSTS определяет список хостов/доменов, с которых разрешено обращаться к серверу Django.
# Использование ['*'] означает, что сервер будет принимать запросы с любых хостов.
# Это удобно для разработки, но небезопасно для использования в продакшене,
# так как открывает сервер для потенциальных атак.
# В продакшене следует указать конкретные домены, например ['example.com', 'www.example.com', 'localhost', '127.0.0.1']
ALLOWED_HOSTS = env('ALLOWED_HOSTS').split()
########################################################################################################################

# Установленные приложения
########################################################################################################################
INSTALLED_APPS = [
    'django.contrib.admin',              # Приложение административной панели Django
    'django.contrib.auth',               # Приложение для аутентификации пользователей Django
    'django.contrib.contenttypes',       # Приложение для работы с контентными типами Django
    'django.contrib.sessions',           # Приложение для работы с сессиями Django
    'django.contrib.messages',           # Приложение для работы с сообщениями Django
    'django.contrib.staticfiles',        # Приложение для работы со статическими файлами Django
    #######################################################################################

    'django.contrib.sites',              # Приложение для поддержки многосайтовой конфигурации Django
    'django.contrib.sitemaps',           # Приложение для создания карты сайта
    'django_cleanup',                    # Приложение для автоматической очистки ненужных файлов
    'captcha',                           # Приложение для добавления капчи в формы для защиты от спама и ботов
    'django_ckeditor_5',                 # Приложение для интеграции редактора CKEditor 5 с Django
    "debug_toolbar",                     # Приложение для отладочной панели Django Debug Toolbar
    'taggit',                            # Приложение для добавления тегов к объектам моделей в Django.
    'mptt',                              # Приложение MPTT для создания древовидной модели категорий для статей

    'modules.blog.apps.BlogConfig',      # Пользовательское приложение блога
    'modules.system.apps.SystemConfig',  # Пользовательское приложение системы
    'modules.services',                  # Пользовательское приложение услуг
]

SITE_ID = 1  # Идентификатор сайта, который определяет текущий сайт в многосайтовой конфигурации Django.
########################################################################################################################

# Средства обработки запросов (middleware)
########################################################################################################################
MIDDLEWARE = [
    # Промежуточное ПО для обеспечения безопасности Django, добавляющее заголовки безопасности к ответам.
    'django.middleware.security.SecurityMiddleware',

    # Промежуточное ПО для работы с сеансами пользователей.
    'django.contrib.sessions.middleware.SessionMiddleware',

    # Общее промежуточное ПО Django для обработки различных аспектов запросов и ответов.
    'django.middleware.common.CommonMiddleware',

    # Промежуточное ПО Django для защиты от CSRF (межсайтовая подделка запроса).
    'django.middleware.csrf.CsrfViewMiddleware',

    # Промежуточное ПО для аутентификации пользователей Django.
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    # Промежуточное ПО для обработки сообщений в Django.
    'django.contrib.messages.middleware.MessageMiddleware',

    # Промежуточное ПО Django для настройки защиты от кликджекинга (внедрения).
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    ###############################################################

    # Промежуточное ПО для интеграции отладочной панели Django Debug Toolbar в проект.
    'debug_toolbar.middleware.DebugToolbarMiddleware',

    # Промежуточное ПО для управления активными пользователями в системе.
    'modules.system.middleware.ActiveUserMiddleware',
]
########################################################################################################################

# Корневой URL-конфиг
########################################################################################################################
ROOT_URLCONF = 'backend.urls'
########################################################################################################################

# Настройки шаблонов
########################################################################################################################
# Определяем список настроек для шаблонов Django.
TEMPLATES = [
    {
        # Указываем бэкенд для обработки шаблонов Django.
        'BACKEND': 'django.template.backends.django.DjangoTemplates',

        # Задаем директории, в которых будут искаться шаблоны.
        'DIRS': [BASE_DIR / 'templates'],

        # Указываем, что шаблоны могут быть найдены внутри приложений (app directories).
        'APP_DIRS': True,

        # Дополнительные настройки для шаблонов Django.
        'OPTIONS': {
            # Контекстные процессоры добавляют переменные в контекст каждого шаблона.
            'context_processors': [
                'django.template.context_processors.debug',             # Добавляет переменную "debug".
                'django.template.context_processors.request',           # Добавляет объект запроса.
                'django.contrib.auth.context_processors.auth',          # Добавляет информацию о текущем пользователе.
                'django.contrib.messages.context_processors.messages',  # Добавляет переменные сообщений.
            ],
        },
    },
]
########################################################################################################################

# Настройка WSGI приложения
########################################################################################################################
WSGI_APPLICATION = 'backend.wsgi.application'
########################################################################################################################

# Устанавливаем список доверенных источников для CSRF
########################################################################################################################
# Это позволяет использовать CSRF защиту только для указанных источников.
CSRF_TRUSTED_ORIGINS = env('CSRF_TRUSTED_ORIGINS').split()
########################################################################################################################

# Настройки для работы с sqlite3
########################################################################################################################
# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Раздел настроек для базы данных по умолчанию в Django
# DATABASES = {
#     'default': {                                 # Настройки для базы данных по умолчанию
#         'ENGINE': 'django.db.backends.sqlite3',  # Используем движок SQLite3
#         'NAME': BASE_DIR / 'db.sqlite3',         # Имя файла базы данных, расположенного в корневой директории проекта
#     }
# }
########################################################################################################################

# Настройки для работы с PostgreSQL
########################################################################################################################
DATABASES = {
    'default': {                                    # Настройки для базы данных по умолчанию
        'ENGINE': 'django.db.backends.postgresql',  # Используем движок PostgreSQL
        'NAME': env('POSTGRES_DB'),                 # Имя базы данных PostgreSQL
        'USER': env('POSTGRES_USER'),               # Имя пользователя для подключения к PostgreSQL
        'PASSWORD': env('POSTGRES_PASSWORD'),       # Пароль для подключения к PostgreSQL
        'HOST': env('POSTGRES_HOST'),               # Хост, на котором размещена база данных PostgreSQL
        'PORT': env('POSTGRES_PORT'),               # Порт, на котором работает PostgreSQL
    }
}
########################################################################################################################

# Настройки валидации паролей
########################################################################################################################
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {   # Валидатор, который проверяет, чтобы пароль не был слишком похож на персональные атрибуты пользователя.
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {   # Валидатор, который проверяет, чтобы длина пароля была не менее определенного значения.
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {   # Валидатор, который проверяет, чтобы пароль не был слишком распространенным или используемым ранее.
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {   # Валидатор, который проверяет, чтобы пароль содержал хотя бы одну цифру.
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
########################################################################################################################


# Настройки интернационализации и локализации в Django.
########################################################################################################################
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru-Ru'    # Код языка для сайта, указывающий на русский язык и его региональные особенности.
TIME_ZONE = 'Europe/Kiev'  # Часовой пояс сайта, установленный на время Киева в Европе.
USE_I18N = True            # Указывает на необходимость использования интернационализации для поддержки различных языков
USE_TZ = True              # Указывает на использование часовых поясов в приложении, используя заданный TIME_ZONE.
########################################################################################################################

# Настройка статических и медиафайлов (CSS, JavaScript, Images)
########################################################################################################################
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# URL-путь для обслуживания статических файлов на веб-сайте.
STATIC_URL = '/static/'

# Директория, куда будут собираться статические файлы для развертывания веб-сайта.
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Дополнительные директории, где Django будет искать статические файлы.
STATICFILES_DIRS = [BASE_DIR / 'static',]

# Директория, где будут сохраняться загруженные медиафайлы (изображения, видео и т.д.).
MEDIA_ROOT = BASE_DIR / 'media'

# URL-путь для доступа к загруженным медиафайлам на веб-сайте.
MEDIA_URL = '/media/'
########################################################################################################################

# Список внутренних IP-адресов, с которых будет доступен отладочный панель.
########################################################################################################################
INTERNAL_IPS: list[str] = [
    # Добавляем локальный IP-адрес, который обычно используется при разработке на локальной машине.
    "127.0.0.1",
    # Дополнительные IP-адреса могут быть добавлены сюда по мере необходимости.
]
########################################################################################################################

# Настройка типа поля первичного ключа по умолчанию
########################################################################################################################
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
# Используемый тип поля первичного ключа по умолчанию в Django моделях.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
########################################################################################################################

# Настройки электронной почты
########################################################################################################################
# Используемый бэкенд для отправки электронной почты (SMTP).
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Хост для подключения к серверу электронной почты.
EMAIL_HOST = env('EMAIL_HOST')

# Порт, используемый для подключения к серверу электронной почты.
EMAIL_PORT = env('EMAIL_PORT')

# Использование SSL/TLS для защищенного подключения.
EMAIL_USE_SSL = int(env('EMAIL_USE_TLS', default=1))

# Имя пользователя для аутентификации на сервере электронной почты.
EMAIL_HOST_USER = env('EMAIL_HOST_USER')

# Пароль для аутентификации на сервере электронной почты.
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

# Электронная почта по умолчанию для отправки сообщений.
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Сервер электронной почты для настроек отправки.
EMAIL_SERVER = EMAIL_HOST_USER

# Адрес электронной почты администратора.
EMAIL_ADMIN = list(EMAIL_HOST_USER)

# Адрес получателя для отправки сообщений.
RECIPIENT_ADDRESS = EMAIL_HOST_USER
########################################################################################################################

# Настройки django-recaptcha
########################################################################################################################
RECAPTCHA_PUBLIC_KEY = env('RECAPTCHA_PUBLIC_KEY')              # Публичный ключ reCAPTCHA для клиентской стороны.
RECAPTCHA_PRIVATE_KEY = env('RECAPTCHA_PRIVATE_KEY')            # Приватный ключ reCAPTCHA для серверной стороны.
CAPTCHA_FONT_PATH = 'static/fonts/VeraSeBd.ttf'                 # Путь к шрифту для CAPTCHA.
CAPTCHA_IMAGE_SIZE = (150, 40)                                  # Размер изображения CAPTCHA (ширина, высота).
CAPTCHA_LENGTH = 6                                              # Длина CAPTCHA (количество символов).
CAPTCHA_NOISE_FUNCTIONS = ('captcha.helpers.noise_arcs',)       # Функции для добавления шума к CAPTCHA.
CAPTCHA_LETTER_ROTATION = (-10, 10)                             # Вращение букв в (минимальный угол, максимальный угол).
CAPTCHA_FOREGROUND_COLOR = '#008000'                            # Цвет переднего плана CAPTCHA (цвет символов).
CAPTCHA_BACKGROUND_COLOR = '#FFFFFF'                            # Цвет фона CAPTCHA.

# Тип вызова CAPTCHA
CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.math_challenge'          # Математическое задание для CAPTCHA.
# CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.random_char_challenge'   # Случайные символы в качестве задания CAPTCHA.
# CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.word_challenge'          # Слова в качестве задания CAPTCHA.
########################################################################################################################

# Настройки для CKEditor
########################################################################################################################
# Определяем настраиваемую цветовую палитру для редактора
customColorPalette = [
    {
        'color': 'hsl(4, 90%, 58%)',    # Красный цвет
        'label': 'Red'                  # Метка цвета
    },
    {
        'color': 'hsl(340, 82%, 52%)',  # Розовый цвет
        'label': 'Pink'                 # Метка цвета
    },
    {
        'color': 'hsl(291, 64%, 42%)',   # Фиолетовый цвет
        'label': 'Purple'                # Метка цвета
    },
    {
        'color': 'hsl(262, 52%, 47%)',   # Темно-фиолетовый цвет
        'label': 'Deep Purple'           # Метка цвета
    },
    {
        'color': 'hsl(231, 48%, 48%)',  # Индиго
        'label': 'Indigo'               # Метка цвета
    },
    {
        'color': 'hsl(207, 90%, 54%)',  # Синий цвет
        'label': 'Blue'                 # Метка цвета
    },
]

CKEDITOR_5_CUSTOM_CSS = 'path_to.css'                    # Путь к пользовательскому CSS (необязательно)
# CKEDITOR_5_FILE_STORAGE = 'storage_app.CustomStorage'  # Путь к пользовательскому хранилищу файлов (необязательно)

# Конфигурация CKEditor
CKEDITOR_5_CONFIGS = {
    'default': {                                                                   # Конфигурация по умолчанию
        'toolbar': ['heading', '|', 'bold', 'italic', 'link',
                    'bulletedList', 'numberedList', 'blockQuote', 'imageUpload'],  # Инструменты на панели
    },
    'extends': {                                              # Расширенная конфигурация
        'blockToolbar': [
            'paragraph', 'heading1', 'heading2', 'heading3',  # Блоки заголовков и параграфов
            '|',
            'bulletedList', 'numberedList',                   # Списки
            '|',
            'blockQuote',                                     # Цитата
        ],
        # Полный набор инструментов на панели
        'toolbar': ['heading', '|', 'outdent', 'indent', '|', 'bold', 'italic', 'link', 'underline', 'strikethrough',
                    'code', 'subscript', 'superscript', 'highlight', '|', 'codeBlock', 'sourceEditing', 'insertImage',
                    'bulletedList', 'numberedList', 'todoList', '|', 'blockQuote', 'imageUpload', '|',
                    'fontSize', 'fontFamily', 'fontColor', 'fontBackgroundColor', 'mediaEmbed', 'removeFormat',
                    'insertTable'],
        'image': {  # Конфигурация для изображений
            'toolbar': ['imageTextAlternative', '|', 'imageStyle:alignLeft',
                        'imageStyle:alignRight', 'imageStyle:alignCenter', 'imageStyle:side', '|'],
            # Панель инструментов для изображений
            'styles': [
                'full',         # Полный размер
                'side',         # Боковая
                'alignLeft',    # Выровнять влево
                'alignRight',   # Выровнять вправо
                'alignCenter',  # Выровнять по центру
            ]
        },
        'table': {  # Конфигурация для таблиц
            'contentToolbar': ['tableColumn', 'tableRow', 'mergeTableCells',
                               'tableProperties', 'tableCellProperties'],
            # Панель инструментов для таблиц
            'tableProperties': {
                'borderColors': customColorPalette,     # Настраиваемые цвета границ таблиц
                'backgroundColors': customColorPalette  # Настраиваемые цвета фона таблиц
            },
            'tableCellProperties': {
                'borderColors': customColorPalette,     # Настраиваемые цвета границ ячеек таблиц
                'backgroundColors': customColorPalette  # Настраиваемые цвета фона ячеек таблиц
            }
        },
        'heading': {  # Конфигурация для заголовков
            'options': [
                # Параграф
                {'model': 'paragraph', 'title': 'Paragraph', 'class': 'ck-heading_paragraph'},
                # Заголовок 1
                {'model': 'heading1', 'view': 'h1', 'title': 'Heading 1', 'class': 'ck-heading_heading1'},
                # Заголовок 2
                {'model': 'heading2', 'view': 'h2', 'title': 'Heading 2', 'class': 'ck-heading_heading2'},
                # Заголовок 3
                {'model': 'heading3', 'view': 'h3', 'title': 'Heading 3', 'class': 'ck-heading_heading3'}
            ]
        }
    },
    'list': {                      # Конфигурация для списков
        'properties': {
            'styles': 'true',      # Разрешить стили для списков
            'startIndex': 'true',  # Разрешить изменение начального индекса списков
            'reversed': 'true',    # Разрешить изменение порядка списков на обратный
        }
    }
}
########################################################################################################################

# Указываем путь к кастомному хранилищу файлов для CKEditor.
# Это хранилище определено в файле 'modules/services/utils.py' и класс называется 'CkeditorCustomStorage'.
# Он будет использоваться для сохранения всех файлов, загруженных через CKEditor.
CKEDITOR_5_FILE_STORAGE = 'modules.services.utils.CkeditorCustomStorage'
########################################################################################################################

# Определяем настройки кэша для Django с файловым кэшированием.
########################################################################################################################
# CACHES = {
#     'default': {
#         # Используем файловое кэширование
#         'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
#         # Путь к директории для хранения кэша, расположенной в корневой директории проекта
#         'LOCATION': BASE_DIR / 'cache',
#     }
# }
########################################################################################################################

# Определяем настройки кэша для Django с использованием Redis.
########################################################################################################################
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',  # Используем Redis в качестве кэша
        'LOCATION': env('REDIS_LOCATION'),                         # Адрес Redis сервера
    }
}
########################################################################################################################

# Настройки Celery
########################################################################################################################
CELERY_BROKER_URL = env('CELERY_BROKER_URL')          # URL брокера сообщений Redis
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND')  # Адрес для хранения результатов выполнения задач в Redis
CELERY_TASK_TRACK_STARTED = True                      # Отслеживать запущенные задачи
CELERY_TASK_TIME_LIMIT = 30 * 60                      # Максимальное время выполнения задачи в секундах, означает 30 мин
CELERY_ACCEPT_CONTENT = ['application/json']          # Принимаемый формат данных для задач
CELERY_RESULT_SERIALIZER = 'json'                     # Формат сериализации результатов задач
CELERY_TASK_SERIALIZER = 'json'                       # Формат сериализации задач
CELERY_TIMEZONE = 'Europe/Kiev'                       # Часовой пояс для Celery
broker_connection_retry_on_startup = True             # Включить повторное подключение к брокеру при запуске

CELERY_BEAT_SCHEDULE = {                                # Планировщик периодических задач (Celery Beat)
    'backup_database': {
        'task': 'modules.services.tasks.dbackup_task',  # Путь к задаче указанной в tasks.py
        'schedule': crontab(hour=0, minute=0),          # Расписание выполнения задачи, каждый день в полночь (00:00).
    },
}
########################################################################################################################

# Определяем настройки системы аутентификации для Django.
########################################################################################################################
AUTHENTICATION_BACKENDS = [
    # Используем кастомный бэкэнд аутентификации UserModelBackend
    'modules.system.backends.UserModelBackend'
]
########################################################################################################################
