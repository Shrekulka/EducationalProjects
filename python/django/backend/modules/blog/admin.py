# backend/modules/blog/admin.py


from django.contrib import admin
from mptt.admin import DraggableMPTTAdmin

from .models import Article, Category, Comment, ViewCount


########################################################################################################################
# Используем декоратор для регистрации модели Category в админке
@admin.register(Category)
class CategoryAdmin(DraggableMPTTAdmin):
    """
       Админ-панель модели категорий.

       Attributes:
           list_display (tuple): Список полей, отображаемых в списке категорий в админ-панели.
           list_display_links (tuple): Поля, которые являются ссылками для перехода к редактированию категории.
           prepopulated_fields (dict): Поля, которые автоматически заполняются на основе других полей.
           fieldsets (tuple): Наборы полей, отображаемые на странице редактирования категории.
    """
    # Указываем поля, которые будут отображаться в списке категорий в админке:
    # 'tree_actions' - действия с деревом категорий,
    # 'indented_title' - название категории с отступами, показывающими вложенность,
    # 'id' - идентификатор категории,
    # 'title' - название категории,
    # 'slug' - человекочитаемый URL категории
    list_display = ('tree_actions', 'indented_title', 'id', 'title', 'slug')
    # Указываем поля, которые будут кликабельными ссылками, ведущими к странице редактирования категории:
    # 'title' - название категории,
    # 'slug' - человекочитаемый URL категории
    list_display_links = ('title', 'slug')
    # Настраиваем автоматическое заполнение поля 'slug' на основе значения поля 'title'
    prepopulated_fields = {'slug': ('title',)}

    # Настраиваем отображение полей в форме редактирования категории
    fieldsets = (
        # Первая секция - основная информация о категории:
        # 'title' - название категории,
        # 'slug' - человекочитаемый URL категории,
        # 'parent' - родительская категория (для создания вложенности)
        ('Основная информация', {'fields': ('title', 'slug', 'parent')}),

        # Вторая секция - описание категории:
        # 'description' - подробное описание категории
        ('Описание', {'fields': ('description',)})
    )


########################################################################################################################
@admin.register(Article)
# Административный интерфейс для модели Article.
class ArticleAdmin(admin.ModelAdmin):
    """
       Админ-панель модели статей.

       Attributes:
           prepopulated_fields (dict): Словарь для автозаполнения поля "slug" на основе поля "title".
    """
    # Задаем автозаполнение поля "slug" на основе поля "title".
    # Это позволяет автоматически создавать уникальный идентификатор для каждой статьи на основе её заголовка.
    prepopulated_fields = {'slug': ('title',)}


########################################################################################################################
@admin.register(Comment)
class CommentAdminPage(DraggableMPTTAdmin):
    """
        Админ-панель модели комментариев.

        Attributes:
            list_display (tuple): Список полей, отображаемых в списке комментариев в админ-панели.
            mptt_level_indent (int): Уровень отступа для полей древовидной структуры.
            list_display_links (tuple): Поля, которые являются ссылками для перехода к редактированию комментария.
            list_filter (tuple): Поля, по которым можно фильтровать комментарии в админ-панели.
            list_editable (tuple): Поля, которые можно редактировать прямо из списка комментариев.
    """
    # Список полей, отображаемых в списке комментариев в админ-панели.
    list_display = ('tree_actions', 'indented_title', 'article', 'author', 'time_create', 'status')

    # Уровень отступа для полей древовидной структуры.
    mptt_level_indent = 2

    # Поля, которые являются ссылками для перехода к редактированию комментария.
    list_display_links = ('article',)

    # Поля, по которым можно фильтровать комментарии в админ-панели.
    list_filter = ('time_create', 'time_update', 'author')

    # Поля, которые можно редактировать прямо из списка комментариев.
    list_editable = ('status',)


########################################################################################################################
@admin.register(ViewCount)
class ViewCountAdmin(admin.ModelAdmin):
    """
        Админ-панель модели просмотров статей.

        Attributes:
            list_display (tuple): Список полей, отображаемых в списке просмотров в админ-панели.
            list_filter (tuple): Поля, по которым можно фильтровать просмотры в админ-панели.
            search_fields (tuple): Поля, по которым можно искать просмотры в админ-панели.
            date_hierarchy (str): Поле для иерархической навигации по датам.
            ordering (tuple): Порядок сортировки в списке объектов.
    """
    list_display = ('article', 'ip_address', 'viewed_on')
    list_filter = ('viewed_on', 'article')
    search_fields = ('ip_address', 'article__title')
    date_hierarchy = 'viewed_on'
    ordering = ('-viewed_on',)

    def __init__(self, *args, **kwargs):
        """
            Конструктор для инициализации ViewCountAdmin.

            Parameters:
                *args: Неименованные аргументы.
                **kwargs: Именованные аргументы.
        """
        super().__init__(*args, **kwargs)
########################################################################################################################
