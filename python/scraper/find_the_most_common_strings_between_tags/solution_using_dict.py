import requests

# URL веб-страницы, содержащей блоки кода
url = "https://stepik.org/media/attachments/lesson/209719/2.html"

# Получаем ответ на запрос по указанному URL с помощью requests и записываем его в переменную response
response = requests.get(url)

# Извлекаем текст из ответа, представляющий HTML-контент веб-страницы
html = response.text

# Создаем словарь ans, который будет содержать коды и количество их вхождений
ans = {}

# Длина открывающего тега <code>
start_tag_length = len('<code>')
# Длина закрывающего тега </code>
stop_tag_length = len('</code>')

# Находим индексы первого вхождения тегов <code> и </code> в HTML-контенте
start = html.find('<code>')

# Находим индекс закрывающего тега </code>, который следует за открывающим тегом <code>, и сохраняем его значение в
# переменной stop. Это значение будет использовано позже для извлечения фрагмента кода между открывающим и закрывающим
# тегами <code></code>. Если в строке нет открывающего или закрывающего тега, метод find() вернет значение -1.
stop = html.find('</code>', start + start_tag_length)

# Используем цикл while для поиска всех фрагментов кода между тегами <code> и </code>
while start > 0 and stop > 0:
    # Извлекаем текст между тегами <code> и </code>
    temp = html[start + start_tag_length: stop]

    # Используем метод setdefault для словаря ans, чтобы инициализировать значение счетчика в 0 при первом вхождении
    # кода, а затем увеличиваем его на 1 при каждом следующем вхождении кода
    ans[temp] = ans.setdefault(temp, 0) + 1

    # Находим следующие индексы тегов <code> и </code> для следующей итерации цикла
    start = html.find('<code>', stop + stop_tag_length)
    stop = html.find('</code>', start + start_tag_length)

# Используем генератор списка, чтобы выбрать коды, у которых количество вхождений равно максимальному
# Результат генератора будет содержать только коды, которые встречаются максимальное количество раз
# Используем функцию print для вывода кодов через пробел
print(*(i for i in ans if ans[i] == max(ans.values())))

# Будет такой ответ - else except finally
